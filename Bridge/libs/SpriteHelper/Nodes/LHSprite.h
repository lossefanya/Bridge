//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __LHSPRITE_NODE__
#define __LHSPRITE_NODE__

#include "cocos2d.h"
#include "Box2d/Box2D.h"
using namespace cocos2d;

class LHBatch;
class LHAnimationNode;
class LHObserverPair;
class LHArray;
class LHDictionary;

class LHSprite : public CCSprite, public CCStandardTouchDelegate
{
public:
    
    virtual ~LHSprite(void);
	virtual void removeSelf();
    
    LHSprite();
    
    virtual bool initBatchSpriteWithDictionary(LHDictionary* dictionary,
                                               LHBatch* batch);
    virtual bool initWithDictionary(LHDictionary* dictionary);
    
    //functions to be used by the user
    static LHSprite* batchSpriteWithDictionary(LHDictionary* dictionary,
                                               LHBatch* batch);//render by batch node
    
    static LHSprite* spriteWithDictionary(LHDictionary* dictionary);//self render
    
    static LHSprite* spriteWithName(const std::string& spriteName,
                                    const std::string& sheetName,
                                    const std::string& spriteHelperFile);
    
    static LHSprite* batchSpriteWithName(const std::string& spriteName,
                                         LHBatch* batch);
    
    //    virtual bool initUsingTexture(CCTexture2D* texture);
    static LHSprite* spriteWithTexture(CCTexture2D* texture);
    
    virtual void postInit(void){};
    
    
    
    CCSize  getRealScale(){return realScale;}
    void    setRealScale(CCSize scl){realScale = scl;}
    
    const std::string&  getUniqueName(void){return uniqueName;}
    void                setUniqueName(const std::string& str){uniqueName = str;}
    
    
    void    setBody(b2Body* b){body = b;}
    b2Body* getBody(){return body;}
    bool    removeBodyFromWorld();
    
    
    const std::string&  getImageFile(){return imageFile;}
    void                setImageFile(const std::string& str){imageFile = str;}
    
    
    CCRect  getOriginalRect(){return originalRect;}
    void    setOrinalRect(CCRect rc){originalRect = rc;}
    
    const std::string& getShSceneName(){return shSceneName;}
    const std::string& getSheetName(){return shSheetName;}
    const std::string& getSpriteName(){return shSpriteName;}

    //TRANSFORMATIONS
    //--------------------------------------------------------------------------
    //The following method will transform the physic body also - if any
    //use this to activate CCActions with physical sprites
    bool getUsesOverloadedTransformations(){return usesOverloadedTransformations;}
    void setUsesOverloadedTransformations(bool v){usesOverloadedTransformations = v;}

    void transformPosition(CCPoint pos);
    void transformRotation(float rot);
    
    void transformScale(float scale);
    void transformScaleX(float sclX);
    void transformScaleY(float sclY);
    
    
    //ANIMATIONS
    //--------------------------------------------------------------------------
    void prepareAnimationNamed(const std::string& animName, const std::string& shScene);
    
    void playAnimation();
    void pauseAnimation();
    void restartAnimation();
    void stopAnimation(); //removes the animation entirely
    
    bool isAnimationPaused();
    
    std::string animationName();
    int numberOfFrames();
    int currentFrame();
    
    float animationDelayPerUnit();
    void setAnimationDelayPerUnit(float d);
    
    std::vector<std::string>    getCurrentFrameDataKeys(); //if no data info -returns empty vector
    float                       getCurrentFrameFloatDataForKey(const std::string& key); //if no data or wrong key - returns -1.0f
    std::string                 getCurrentFrameStringDataForKey(const std::string& key); //if no data or wrong key - returns empty string
    bool                        getCurrentFrameBoolDataForKey(const std::string& key); //if no data or wrong key returns false
    bool                        isCurrentFrameValueForKeyFloat(const std::string& key);
    bool                        isCurrentFrameValueForKeyString(const std::string& key);
    bool                        isCurrentFrameValueForKeyBool(const std::string& key);
    
    
    float animationDuration();//return how much time will take for a loop to complete
    
    void setFrame(int frmNo);
    void nextFrame();
    void prevFrame();
    
    void nextFrameAndRepeat(); //will loop when it reaches end
    void prevFrameAndRepeat(); //will loop when it reaches start
    
    bool isAtLastFrame();
    
    
    //Box2d helpful methods
    //--------------------------------------------------------------------------
    static std::string  uniqueNameForBody(b2Body* body);
    static LHSprite*    spriteForBody(b2Body* body);
    static int          tagForBody(b2Body* body);
    static bool         isLHSprite(CCNode* obj);
    
    //Box2d COLLISION FILTER
    //--------------------------------------------------------------------------
    void setCollisionFilterCategory(int category);
    void setCollisionFilterMask(int mask);
    void setCollisionFilterGroup(int group);
    
    //Box2d BODY TYPE TRANSFORMATION
    //--------------------------------------------------------------------------
    void makeDynamic();
    void makeStatic();
    void makeKinematic();

    //SH help methods
    void setShSceneName(const std::string&  sceneName){shSceneName = sceneName;}
    
    bool isTouchedAtPoint(CCPoint point);
    
    void update(float dt);
private:
    
    b2Body* body; //week ptr
    CCArray* fixturesObj;
    LHArray* fixturesInfo;
    
    std::string uniqueName;
    
    std::string shSceneName;
    std::string shSheetName;
    std::string shSpriteName;
        
    std::string imageFile;
    CCRect originalRect;
    
    LHAnimationNode* animation;
    
    CCSize realScale; //used for the joints in case you create a level with SD graphics using ipad template
            
    bool usesOverloadedTransformations; //false uses native Cocos2d setPosition setRotation - true uses LH (may cause problems in certain game logics)
    
    void createFixturesFromInfoOnBody();
    void loadPhysicalInformationFromDictionary(LHDictionary* dictionary);
    void loadAnimationsInformationFromDictionary(LHDictionary* dictionary);
    void loadInformationFromDictionary(LHDictionary* dictionary);
};

#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
